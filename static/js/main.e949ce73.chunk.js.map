{"version":3,"sources":["Data.js","DropDown.js","App.js","serviceWorker.js","index.js"],"names":["data","key","name","DropDown","_this","this","react_default","a","createElement","style","backgroundColor","concat","props","backColor","color","fontColor","map","item","className","value","searchOnKey","Component","App","DropDown_DropDown","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAmJeA,SAnJJ,CACP,CACAC,IAAO,KACPC,KAAQ,+BAER,CACAD,IAAO,KACPC,KAAQ,kBAER,CACAD,IAAO,KACPC,KAAQ,qBAER,CACAD,IAAO,KACPC,KAAQ,SAER,CACAD,IAAO,KACPC,KAAQ,SAER,CACAD,IAAO,KACPC,KAAQ,cAER,CACAD,IAAO,KACPC,KAAQ,gBAER,CACAD,IAAO,KACPC,KAAQ,0BAER,CACAD,IAAO,KACPC,KAAQ,iBAER,CACAD,IAAO,KACPC,KAAQ,SAER,CACAD,IAAO,KACPC,KAAQ,OAER,CACAD,IAAO,KACPC,KAAQ,WAER,CACAD,IAAO,KACPC,KAAQ,WAER,CACAD,IAAO,KACPC,KAAQ,oBAER,CACAD,IAAO,KACPC,KAAQ,qBAER,CACAD,IAAO,KACPC,KAAQ,aAER,CACAD,IAAO,KACPC,KAAQ,aAER,CACAD,IAAO,KACPC,KAAQ,UAER,CACAD,IAAO,KACPC,KAAQ,eAER,CACAD,IAAO,KACPC,KAAQ,kBAER,CACAD,IAAO,KACPC,KAAQ,eAER,CACAD,IAAO,KACPC,KAAQ,WAER,CACAD,IAAO,KACPC,KAAQ,aAER,CACAD,IAAO,KACPC,KAAQ,WAER,CACAD,IAAO,KACPC,KAAQ,YAER,CACAD,IAAO,KACPC,KAAQ,UAER,CACAD,IAAO,KACPC,KAAQ,cAER,CACAD,IAAO,KACPC,KAAQ,UAER,CACAD,IAAO,KACPC,KAAQ,aAER,CACAD,IAAO,KACPC,KAAQ,UAER,CACAD,IAAO,KACPC,KAAQ,cAER,CACAD,IAAO,KACPC,KAAQ,aAER,CACAD,IAAO,KACPC,KAAQ,WAER,CACAD,IAAO,KACPC,KAAQ,iBAER,CACAD,IAAO,KACPC,KAAQ,eAER,CACAD,IAAO,KACPC,KAAQ,4DC5ISC,0LAGR,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,UACCC,MAAO,CAACC,gBAAe,GAAAC,OAAIN,KAAKO,MAAMC,WAAaC,MAAK,GAAAH,OAAIN,KAAKO,MAAMG,aAEnEV,KAAKO,MAAMZ,KAAKgB,IAAI,SAAAC,GAAI,OACxBX,EAAAC,EAAAC,cAAA,UAAQU,UAAU,SAASC,MAAOF,EAAKb,EAAKQ,MAAMQ,cAAeH,EAAKb,EAAKQ,MAAMQ,yBAV/DC,cCevBC,MAbf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAACe,EAAD,CACEvB,KAAMA,EACNoB,YAAY,OACZP,UAAU,SACVE,UAAU,YCAES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e949ce73.chunk.js","sourcesContent":["var data = [\n    {\n    \"key\": \"AN\",\n    \"name\": \"Andaman and Nicobar Islands\"\n    },\n    {\n    \"key\": \"AP\",\n    \"name\": \"Andhra Pradesh\"\n    },\n    {\n    \"key\": \"AR\",\n    \"name\": \"Arunachal Pradesh\"\n    },\n    {\n    \"key\": \"AS\",\n    \"name\": \"Assam\"\n    },\n    {\n    \"key\": \"BR\",\n    \"name\": \"Bihar\"\n    },\n    {\n    \"key\": \"CG\",\n    \"name\": \"Chandigarh\"\n    },\n    {\n    \"key\": \"CH\",\n    \"name\": \"Chhattisgarh\"\n    },\n    {\n    \"key\": \"DH\",\n    \"name\": \"Dadra and Nagar Haveli\"\n    },\n    {\n    \"key\": \"DD\",\n    \"name\": \"Daman and Diu\"\n    },\n    {\n    \"key\": \"DL\",\n    \"name\": \"Delhi\"\n    },\n    {\n    \"key\": \"GA\",\n    \"name\": \"Goa\"\n    },\n    {\n    \"key\": \"GJ\",\n    \"name\": \"Gujarat\"\n    },\n    {\n    \"key\": \"HR\",\n    \"name\": \"Haryana\"\n    },\n    {\n    \"key\": \"HP\",\n    \"name\": \"Himachal Pradesh\"\n    },\n    {\n    \"key\": \"JK\",\n    \"name\": \"Jammu and Kashmir\"\n    },\n    {\n    \"key\": \"JH\",\n    \"name\": \"Jharkhand\"\n    },\n    {\n    \"key\": \"KA\",\n    \"name\": \"Karnataka\"\n    },\n    {\n    \"key\": \"KL\",\n    \"name\": \"Kerala\"\n    },\n    {\n    \"key\": \"LD\",\n    \"name\": \"Lakshadweep\"\n    },\n    {\n    \"key\": \"MP\",\n    \"name\": \"Madhya Pradesh\"\n    },\n    {\n    \"key\": \"MH\",\n    \"name\": \"Maharashtra\"\n    },\n    {\n    \"key\": \"MN\",\n    \"name\": \"Manipur\"\n    },\n    {\n    \"key\": \"ML\",\n    \"name\": \"Meghalaya\"\n    },\n    {\n    \"key\": \"MZ\",\n    \"name\": \"Mizoram\"\n    },\n    {\n    \"key\": \"NL\",\n    \"name\": \"Nagaland\"\n    },\n    {\n    \"key\": \"OR\",\n    \"name\": \"Odisha\"\n    },\n    {\n    \"key\": \"PY\",\n    \"name\": \"Puducherry\"\n    },\n    {\n    \"key\": \"PB\",\n    \"name\": \"Punjab\"\n    },\n    {\n    \"key\": \"RJ\",\n    \"name\": \"Rajasthan\"\n    },\n    {\n    \"key\": \"SK\",\n    \"name\": \"Sikkim\"\n    },\n    {\n    \"key\": \"TN\",\n    \"name\": \"Tamil Nadu\"\n    },\n    {\n    \"key\": \"TS\",\n    \"name\": \"Telangana\"\n    },\n    {\n    \"key\": \"TR\",\n    \"name\": \"Tripura\"\n    },\n    {\n    \"key\": \"UK\",\n    \"name\": \"Uttar Pradesh\"\n    },\n    {\n    \"key\": \"UP\",\n    \"name\": \"Uttarakhand\"\n    },\n    {\n    \"key\": \"WB\",\n    \"name\": \"West Bengal\"\n    }\n    ]\n\nexport default data;","import React, { Component } from 'react';\nimport './DropDown.css';\n\nexport default class DropDown extends Component {\n\n\n    render() {\n        return (\n            <div>\n               <select \n                style={{backgroundColor:`${this.props.backColor}`, color:`${this.props.fontColor}`}}\n               >\n                   {this.props.data.map(item => \n                    <option className=\"option\" value={item[this.props.searchOnKey]}>{item[this.props.searchOnKey]}</option>\n                   )}\n               </select> \n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport data from './Data';\nimport './App.css';\nimport DropDown from './DropDown';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DropDown \n        data={data} \n        searchOnKey=\"name\" \n        backColor=\"orange\"\n        fontColor=\"white\"\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}